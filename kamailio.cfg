#!KAMAILIO

include_file "test_defs.cfg"
include_file "test_value.cfg"
include_file "test_modules.cfg"

# BFLG_ - Branch flags func: setbflag/resetbflag/isbflagset #############
# TFLG_ - Transaction (message) flags func: setflag/resetflag/isflagset ############
# SFLG_ - Script flags func: setsflag/resetsflag/issflagset ###########

#!define BFLG_NAT 6
#!define TFLG_FROM_PROV 4
#!define TFLG_FROM_CLIENT_WS 7
#!define TFLG_FROM_CLIENT_SIP 8
#!define TFLG_NAT 5

################################################################
#END MODULES & PARAMS
################################################################

request_route
{
    route(CHECK_PARAMETERS_PACKET);
    route(CHECK_USER_AGENT);

    route(PROCESSING_OPTIONS);

    pv_printf("$avp(s:log)", "============ RECEIVE $rm =========="); route(LOG);
    pv_printf("$avp(s:log)", "Src IP Port:$si:$sp:$rp:$Rp:$Ri"); route(LOG);
    pv_printf("$avp(s:log)", "Rec IP Port:$Ri:$Rp"); route(LOG);
    pv_printf("$avp(s:log)", "R-URI:      $ru"); route(LOG);
    pv_printf("$avp(s:log)", "From User:  $fU"); route(LOG);
    pv_printf("$avp(s:log)", "To User:    $tU"); route(LOG);

    route(DIRECT_DETECT);
    route(NAT_DETECT);

    record_route();

    if ( is_method('REGISTER') ) route(PROCESSING_REGISTER);

    route(CHECK_LOOSE_ROUTE);

    if ( is_method('INVITE') )      route(PROCESSING_INVITE);
    if ( is_method("ACK") )         route(PROCESSING_ACK);
    if ( is_method('BYE') )         route(PROCESSING_BYE);
    if ( is_method("CANCEL") )      route(PROCESSING_CANCEL);
    if ( is_method('INFO') )        route(PROCESSING_INFO);
    if ( is_method('PRACK') )       route(PROCESSING_PRACK);
    if ( is_method('REFER') )       route(PROCESSING_REFER);
    if ( is_method('NOTIFY') )      route(PROCESSING_NOTIFY);
    if ( is_method("UPDATE") )      route(PROCESSING_UPDATE);
    if ( is_method("SUBSCRIBE") )   route(PROCESSING_SUBSCRIBE);
    if ( is_method("MESSAGE") )     route(PROCESSING_MESSAGE);

    pv_printf("$avp(s:log)", "Method not support --> Send 514"); route(LOG);
    sl_send_reply("514", "Method not support");
    exit;
}

route[PROCESSING_REGISTER]
{
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
    pv_printf("$avp(s:log)", "*** PROCESSING_REGISTER"); route(LOG);
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);

    pv_printf("$avp(s:log)", "Original contact: $hdr(Contact)"); route(LOG);

    if ( !route(SAVE_CONTACT_IN_LOCATION) ) {
        sl_send_reply("500", "Server error");
        exit;
    }

    t_on_branch("TO_SIP_PROVIDER");
    t_on_failure("FAIL_SIP_PROVIDER");
    route(TRELAY);
    exit;
}

route[PROCESSING_INVITE]
{
    if ( !is_method('INVITE') ) return(-1);

    pv_printf("$avp(s:log)", "*** INVITE PROCCESSING"); route(LOG);

    if ( route(RTP_PROXY_CHECK_METHOD) ) t_on_reply("RTP_PROXY_REPLY");

    if ( route(CHECK_RE_INVITE) ) {
        t_relay();
        exit;
    }

    if ( isflagset(TFLG_FROM_PROV) ) {
        route(TO_CLIENT);
        t_on_branch("TO_CLIENT");
    }
    else {
        route(TO_SIP_PROVIDER);
        t_on_branch("TO_SIP_PROVIDER");
        t_on_failure("FAIL_SIP_PROVIDER");
    }

    route(TRELAY);
    exit;
}

route[CHECK_PARAMETERS_PACKET]
{
    if ( msg:len >=  2048 ) {
        pv_printf("$avp(s:log)", "Message too big --> Send 513"); route(LOG);
        sl_send_reply("513", "Message too big");
        exit;
    }

    if ( !mf_process_maxfwd_header('10') and !is_method('OPTIONS') ) {
        pv_printf("$avp(s:log)", "Too Many Hops --> Send 483"); route(LOG);
        sl_send_reply('483','Too Many Hops');
        exit;
    }

    if ( !sanity_check('1024', '7') ) {
        #checking RURI TO FROM url
        pv_printf("$avp(s:log)", "Malformed SIP message from $avp(si):$sp --> Send 400"); route(LOG);
        sl_send_reply('400','Bad RURI or To or From field');
        exit;
    }

}

route[CHECK_USER_AGENT]
{
    if ( src_ip!=myself ) {

        if ( $ua =~ 'VoipSwitch' or pcre_match("$ua", "^VOIP$$") or pcre_match("$ua", "^smap$$") or pcre_match("$ua", "^sipcli$$")
                or pcre_match("$ua", "^PortSIP$$") or pcre_match("$ua", "^iWar$$") or pcre_match("$ua", "^SIVuS$$") or pcre_match("$ua", "^Gulp$$")
                or pcre_match("$ua", "^sipv$$") or pcre_match("$ua", "^SIP Call$$") or pcre_match("$ua", "^Conaito$$") or pcre_match("$ua", "^Gbomba$$")
                or pcre_match("$ua", "^sdfsfsdfsdfdf$$") or pcre_match("$ua", "^Nmap NSE$$") or pcre_match("$ua", "^BaSeL-X$$") or pcre_match("$ua", "^pplsip$$")
                or pcre_match("$ua", "^sipptk$$") or pcre_match("$ua", "^MGKsip$$") or pcre_match("$ua", "^A_B_C$$") or pcre_match("$ua", "^zxcvfdf11$$")
                or pcre_match("$ua", "^IPOffice$$") or pcre_match("$ua", "^sipsak$$") or pcre_match("$ua", "^eyeBeam$$") or pcre_match("$ua", "^bc-uc v11.0.0$$")
                or pcre_match("$ua", "^FPBX-oday$$") )
        {
            pv_printf("$avp(s:log)", "User-Agent $ua block --> block IP --> Send 200 Hok"); route(LOG);
            sl_send_reply('200','Hok');
            exit;
        }
    }
}

route[DIRECT_DETECT]
{
    if ( $_s($Ri) == $_s($sel(cfg_get.proxy.ip_for_sip_prov)) and $_s($Rp) == $_s($sel(cfg_get.proxy.port_for_sip_prov)) )        setflag(TFLG_FROM_PROV);
    else if ( $_s($Ri) == $_s($sel(cfg_get.proxy.ip_for_ws_client)) and $_s($Rp) == $_s($sel(cfg_get.proxy.ip_for_ws_client)) )   setflag(TFLG_FROM_CLIENT_WS);
    else setflag(TFLG_FROM_CLIENT_SIP);

    return(1);
}

route[PROCESSING_OPTIONS]
{
    if ( !is_method('OPTIONS') ) return(-1);

    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);

    if ( !route(SELECT_CONTACT_FROM_LOCATION) ) {
        exit;
    }

    pv_printf("$avp(s:log)", "Found contact --> send OPTIONS"); route(LOG);
    t_relay();
    exit;
}


route[NAT_DETECT]
{
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
    pv_printf("$avp(s:log)", "*** NAT_DETECT and Change SDP o and c"); route(LOG);
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);

    if ( nat_uac_test("23") ) {
        setflag(TFLG_NAT);

        if ( is_method('INVITE') and has_body("application/sdp") ) {
            fix_nated_contact();
            pv_printf("$avp(s:log)", "User za NAT --> Replicate SDP: OK"); route(LOG);
        }
        else if ( is_method('REGISTER') ) {
            pv_printf("$avp(s:log)", "Set flags for usrloc and client ping"); route(LOG);
            fix_nated_register();
        }
        else if ( is_method('SUBSCRIBE') ) {
            pv_printf("$avp(s:log)", "Subscribe --> fix_nated_contact"); route(LOG);
            fix_nated_contact();
        }

        force_rport();
    }
}

route[PROCESSING_INFO]
{
    if ( !is_method('INFO') ) return;

    route(CHECK_ACTIVE_DIALOG);
    route(TRELAY);
}

route[PROCESSING_PRACK]
{
    if ( !is_method('PRACK') ) return;

    route(CHECK_ACTIVE_DIALOG);
    route(TRELAY);
}

route[PROCESSING_UPDATE]
{
    if ( !is_method('UPDATE') ) return;

    if ( route(RTP_PROXY_CHECK_METHOD) ) t_on_reply("RTP_PROXY_REPLY");

    route(CHECK_ACTIVE_DIALOG);
    route(TRELAY);
}

route[PROCESSING_SUBSCRIBE]
{
    if ( !is_method('SUBSCRIBE') ) return;

    if ( route(RTP_PROXY_CHECK_METHOD) ) t_on_reply("RTP_PROXY_REPLY");

    route(CHECK_ACTIVE_DIALOG);
    route(TRELAY);
}

route[PROCESSING_MESSAGE]
{
    if ( !is_method('MESSAGE') ) return;

    if ( route(RTP_PROXY_CHECK_METHOD) ) t_on_reply("RTP_PROXY_REPLY");

    route(CHECK_ACTIVE_DIALOG);
    route(TRELAY);
}

route[PROCESSING_REFER]
{
    if ( !is_method('REFER') ) return;

    route(CHECK_ACTIVE_DIALOG);
    route(TRELAY);
}

route[PROCESSING_NOTIFY]
{
    if ( !is_method('NOTIFY') ) return;

    route(CHECK_ACTIVE_DIALOG);
    route(TRELAY);
}

route[PROCESSING_BYE]
{
    if ( !is_method('BYE') )

    route(CHECK_ACTIVE_DIALOG);
    route(TRELAY);
}

route[PROCESSING_CANCEL]
{
    if ( !is_method('CANCEL') ) return;

    if ( route(RTP_PROXY_CHECK_METHOD) ) t_on_reply("RTP_PROXY_REPLY");

    if ( !t_check_trans() ) {
        pv_printf("$avp(s:log)", "CANCEL no transaction ---> exit"); route(LOG);
        sl_send_reply('481', 'Call/Transaction Does Not Exist');
        exit;
    }

    pv_printf("$avp(s:log)", "Yes transaction --> t_relay_cancel"); route(LOG);
    if ( !t_relay_cancel() ) {
        pv_printf("$avp(s:log)", "CANCEL but error --> 500 Internal Server Error"); route(LOG);
        sl_send_reply("500", "Internal Server Error");
        drop;
        exit;
    }
}

route[PROCESSING_ACK]
{
    if ( !is_method('ACK') ) return;

    if ( route(RTP_PROXY_CHECK_METHOD) ) t_on_reply("RTP_PROXY_REPLY");

    #route(CHECK_ACTIVE_DIALOG);
    route(TRELAY);
}

route[CHECK_LOOSE_ROUTE]
{
    if ( !loose_route() ) {
        pv_printf("$avp(s:log)", "Request NOT have Route SET (loose_route)"); route(LOG);
    }
    else {
        pv_printf("$avp(s:log)", "Request has route SET (loose_route)"); route(LOG);
    }

    return(1);
}

route[CHECK_ACTIVE_DIALOG]
{
    if ( !is_known_dlg() ) {
        pv_printf("$avp(s:log)", "No active dialog ---> exit"); route(LOG);
        sl_send_reply('481', 'Call/Transaction Does Not Exist');
        exit;
    }

    pv_printf("$avp(s:log)", "Yes active dialog"); route(LOG);
    return(1);
}

route[CHECK_RE_INVITE]
{
    if ( has_totag() && loose_route() ) {
        pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
        pv_printf("$avp(s:log)", "Re-INVITE from $si --> forward loose_route"); route(LOG);
        pv_printf("$avp(s:log)", "==================================="); route(LOG);
        return(1);
    }

    return(-1);
}

route[TO_SIP_PROVIDER]
{
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
    pv_printf("$avp(s:log)", "*** TO_SIP_PROVIDER"); route(LOG);
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);

    return(1);
}

route[TO_CLIENT]
{
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
    pv_printf("$avp(s:log)", "*** TO_CLIENT"); route(LOG);
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);

    if ( !route(SELECT_CONTACT_FROM_LOCATION) ) {
        sl_send_reply('404', 'Not Found contact');
        exit;
    }

    pv_printf("$avp(s:log)", "Found sip contact: $ru"); route(LOG);
    pv_printf("$avp(s:log)", "Found dest uri:    $du"); route(LOG);

    return(1);
}

route[SELECT_CONTACT_FROM_LOCATION]
{
    pv_printf("$avp(s:log)", "Find contact EndPoint $rU ..."); route(LOG);

    lookup("location");

    if ( $retcode != 1 ) {
        pv_printf("$avp(s:log)", "Not Found"); route(LOG);
        return(-1);
    }

    return(1);
}

route[SAVE_CONTACT_IN_LOCATION]
{
    pv_printf("$avp(s:log)", "Save contact....."); route(LOG);

    if ( !save("location", "0x06") ) {  #this return sip 200 OK or error
        pv_printf("$avp(s:log)", "No  save contact"); route(LOG);
        return(-1);
    }

    pv_printf("$avp(s:log)", "Save contact OK"); route(LOG);
    return(1);
}

route[TRELAY]
{
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
    pv_printf("$avp(s:log)", "*** RELAY to $nh(d):$nh(p)"); route(LOG);
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
    pv_printf("$avp(s:log)", "Relay Request:      $rm $ru"); route(LOG);
    pv_printf("$avp(s:log)", "Relay local socket: $fs"); route(LOG);
    pv_printf("$avp(s:log)", "Relay to dest:      $rd"); route(LOG);


    if ( !t_relay() ) {
        sl_reply_error();
        pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
        pv_printf("$avp(s:log)", "*** Relay FAIL"); route(LOG);
    }
    else {
        pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
        pv_printf("$avp(s:log)", "*** Relay SUCCESSFUL"); route(LOG);
    }

    pv_printf("$avp(s:log)", "==================================="); route(LOG);
    exit;
}

branch_route[TO_SIP_PROVIDER]
{
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
    pv_printf("$avp(s:log)", "*** BRANCH TO_SIP_PROVIDER"); route(LOG);
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);

    route(SET_LOCAL_SOCKET);
    route(NAT_MANAGE);

    if ( is_method('REGISTER') ) {
        pv_printf("$avp(s:log)", "Change contact and save"); route(LOG);

        $avp(s:orig_contact) = $ct;
        $avp(s:contact_expires) = $ct;

        if ( !avp_subst("$avp(s:contact_expires)", "/.*<(.*)>;expires=(.*);(.*)$/\2/") ) {
            if( is_present_hf("Expires") ) $avp(s:contact_expires) = $hdr(Expires);
            remove_hf("Expires");
        }

        avp_subst("$avp(s:orig_contact)", "/.*<(.*)>;(.*)/\1/");

        pv_printf("$avp(s:log)", "Data: $avp(s:contact_expires) - $avp(s:orig_contact)"); route(LOG);

        $sht(remote_sip_contact=>$fU) = $ct;

        pv_printf("$avp(s:log)", "  Remove original hdr Contact --> insert new"); route(LOG);
        remove_hf("Contact");

        insert_hf("Contact: <sip:$fU@$sel(cfg_get.proxy.ext_for_sip_prov):$sel(cfg_get.proxy.port_for_sip_prov)>;expires=$avp(s:contact_expires)\r\n", "Call-ID");
        pv_printf("$avp(s:log)", "New contact: <sip:$fU@$sel(cfg_get.proxy.ext_for_sip_prov):$sel(cfg_get.proxy.port_for_sip_prov)>;expires=$avp(s:contact_expires)"); route(LOG);
    }
}

branch_route[TO_CLIENT]
{
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
    pv_printf("$avp(s:log)", "*** BRANCH TO_CLIENT"); route(LOG);
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);

    route(SET_LOCAL_SOCKET);
    route(NAT_MANAGE);
}

route[SET_LOCAL_SOCKET]
{
    pv_printf("$avp(s:log)", "Set local socket"); route(LOG);

    if ( isflagset(TFLG_FROM_PROV) ) {
        set_send_socket("udp:$sel(cfg_get.proxy.ip_for_sip_client):$sel(cfg_get.proxy.port_for_sip_client)");
        return(1);
    }

    if ( isflagset(TFLG_FROM_CLIENT_SIP) ) {
        set_send_socket("udp:$sel(cfg_get.proxy.ip_for_sip_prov):$sel(cfg_get.proxy.port_for_sip_prov)");
        return(1);
    }

    if ( isflagset(TFLG_FROM_CLIENT_WS) ) {
        set_send_socket("udp:$sel(cfg_get.proxy.ip_for_sip_prov):$sel(cfg_get.proxy.port_for_sip_prov)");
        return(1);
    }

    pv_printf("$avp(s:log)", "Set default local socket udp:$sel(cfg_get.proxy.ip_for_sip_client):$sel(cfg_get.proxy.port_for_sip_client)"); route(LOG);
    set_send_socket("udp:$sel(cfg_get.proxy.ip_for_sip_client):$sel(cfg_get.proxy.port_for_sip_client)");
    return(-1);
}

route[NAT_MANAGE]
{
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
    pv_printf("$avp(s:log)", "*** NAT_MANAGE"); route(LOG);
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);

    if ( isflagset(TFLG_FROM_PROV) and is_reply() ) {
        return;
    }

    if ( is_request() ) {
        if (has_totag() ) {
            if ( check_route_param("nat=yes") ) {
                setbflag(BFLG_NAT);
            }
        }
    }

    if ( !(isflagset(TFLG_NAT) || isbflagset(BFLG_NAT)) )
        return;

    if ( is_request() ) {
        if ( !has_totag() ) {
            if ( t_is_branch_route() ) {
                add_rr_param(";nat=yes");
            }
        }
    }

    if ( is_reply() ) {
        if ( isbflagset(BFLG_NAT) ) {
            if ( is_first_hop() )
                set_contact_alias();
        }
    }

    return;
}

failure_route
{
    pv_printf("$avp(s:log)", "==================================="); route(LOG);
    pv_printf("$avp(s:log)", "*** Receiving Fail reply $T_reply_code"); route(LOG);
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);

    route(NAT_MANAGE);
}

failure_route[FAIL_SIP_PROVIDER]
{
    pv_printf("$avp(s:log)", "==================================="); route(LOG);
    pv_printf("$avp(s:log)", "*** Receiving Fail reply prov $T_reply_code"); route(LOG);
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);

    route(NAT_MANAGE);
}

onreply_route
{
    pv_printf("$avp(s:log)", "Receive reply $rs $rr on $rm $si"); route(LOG);

    if($rm == "REGISTER" and $rs == "200")
    {
        if( $sht(remote_sip_contact=>$fU) != $null  )
        {
            $avp(s:remote_sip_contact) = $sht(remote_sip_contact=>$fU);

            $avp(s:contact_expires) = $hdr(Contact);
            pv_printf("$avp(s:log)", "Receive hdr contact $hdr(Contact)"); route(LOG);
            avp_subst("$avp(s:contact_expires)", "/(.*)<sip:(.*)>;(.*)/\3/");

            pv_printf("$avp(s:log)", "Result parsing expires: $avp(s:contact_expires)"); route(LOG);
            pv_printf("$avp(s:log)", "Remove receive hdr Contact --> insert new"); route(LOG);
            remove_hf("Contact");
            insert_hf("Contact: $avp(s:remote_sip_contact);$avp(s:contact_expires)\r\n", "Call-ID");
            pv_printf("$avp(s:log)", "New contact: $avp(s:remote_sip_contact);$avp(s:contact_expires)"); route(LOG);
        }
    }

    if ( status=~"[12][0-9][0-9]" ) {
        route(NAT_MANAGE);
    }
}

onreply_route[RTP_PROXY_REPLY]
{
    pv_printf("$avp(s:log)", "----------RECEIVED REPLY RTP------------"); route(LOG);
    pv_printf("$avp(s:log)", "Code reply $T_reply_code response to $rm "); route(LOG);

    route(RTP_PROXY_CHECK_REPLY);
}

onsend_route
{
    xlog("L_INFO", "-----------------------------------");
    xlog("L_INFO", "*** SEND");
    xlog("L_INFO", "-----------------------------------");
    xlog("L_INFO", "Local socket:       $sndfrom(sproto):$sndfrom(ip):$sndfrom(port)");
    xlog("L_INFO", "Destination socket: $sndto(sproto):$sndto(ip):$sndto(port)");
    xlog("L_INFO", "-----------------------------------");
}

route[LOG]
{
    xlog("L_INFO", "$avp(s:log)");
}

route[RTP_PROXY_CHECK_METHOD]
{
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
    pv_printf("$avp(s:log)", "*** RTP PROXY CHECK METHOD"); route(LOG);
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);

    if ( !is_known_dlg() ) {
        if ( is_method("INVITE") and has_body("application/sdp") ) {
            route(RTP_PROXY_SET);
            return(1);
        }
    }

    if ( is_method("CANCEL") and t_check_trans() ) {
        route(RTP_PROXY_SET);
        return(1);
    }

    if ( is_known_dlg() ) {
        if ( is_method("INVITE") or is_method("ACK") or is_method("UPDATE") ) {
            if ( !has_body("application/sdp") ) {
                return(1);
            }

            route(RTP_PROXY_SET);
            return(1);
        }

        if ( is_method("BYE") ) {
            route(RTP_PROXY_SET);
            return(1);
        }
    }

    return(-1);
}

route[RTP_PROXY_CHECK_REPLY]
{
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
    pv_printf("$avp(s:log)", "*** RTP PROXY CHECK REPLY"); route(LOG);
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);

    if ( t_check_status("^1") or t_check_status("^2") ) {
        if ( has_body("application/sdp") ) {
            route(RTP_PROXY_SET);
            return(1);
        }
    }

    return(-1);
}

route[RTP_PROXY_SET]
{
    set_rtpengine_set("1");

    if ( rtpengine_manage("ICE=remove replace-origin replace-session-connection record-call=on") ) {
        pv_printf("$avp(s:log)", "RTP Proxy OK"); route(LOG);
        return(1);
    }

    pv_printf("$avp(s:log)", "RTP Proxy ERROR"); route(LOG);
    return(-1);
}

event_route[xhttp:request]
{
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
    pv_printf("$avp(s:log)", "*** HTTP event request $hdr(Upgrade)"); route(LOG);
    pv_printf("$avp(s:log)", "-----------------------------------"); route(LOG);
}

